extends includes/layout.pug

block content
  article#page
    //- h1= page.title
    //- != page.content
  if page.title === 'tags'
    #category
      - var categoriesList = list_categories({ show_count: theme.tagsPage.category.show_count })
      - var tagsList = list_tags({ show_count: theme.tagsPage.tag.show_count })
      #categories
        h1!= __("category.categories")
        if categoriesList
          != list_categories({show_count: theme.tagsPage.category.show_count, style: span, depth: 1})
        else
          p None.
      br
      #tags
        h1!= __("category.tags")
        if site.tags.length
          // 检查是否启用字母索引功能
          if theme.tagsPage.tag.alphabet_index
            // 字母索引模式 - 使用转换库将所有语言转为英文字母索引
            - 
              // 构建字母表 - 根据配置决定是否包含韩语初声
              var englishAlphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ#'.split('')
              var koreanInitials = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ']
              
              // 检查是否启用韩语支持
              var koreanEnabled = theme.tagsPage && theme.tagsPage.tag && theme.tagsPage.tag.korean && theme.tagsPage.tag.korean.enabled
              
              // 根据配置构建完整字母表
              var alphabet = []
              if (koreanEnabled) {
                alphabet = koreanInitials.concat(englishAlphabet)
              } else {
                alphabet = englishAlphabet
              }
              
              // 字符转换函数 - 将不同语言转换为字母索引
              function getLetterIndex(text) {
                if (!text) return '#'
                var firstChar = text.charAt(0).toUpperCase()
                
                // 检查是否为英文字母
                if (/[A-Z]/.test(firstChar)) {
                  return firstChar
                }
                
                // 检查是否为韩文字符
                var code = firstChar.charCodeAt(0)
                if (code >= 0xAC00 && code <= 0xD7A3) {
                  // 韩文字符 - 如果启用韩语支持，提取初声，否则归入 #
                  if (koreanEnabled) {
                    var BASE = 0xAC00
                    var CHOSEONG = ['ㄱ','ㄲ','ㄴ','ㄷ','ㄸ','ㄹ','ㅁ','ㅂ','ㅃ','ㅅ','ㅆ','ㅇ','ㅈ','ㅉ','ㅊ','ㅋ','ㅌ','ㅍ','ㅎ']
                    var BLOCK = 588
                    var codeIndex = code - BASE
                    if (codeIndex >= 0 && codeIndex <= 11171) {
                      return CHOSEONG[Math.floor(codeIndex / BLOCK)]
                    }
                  }
                }
                
                // 其他字符归入 # 类别
                return '#'
              }
            
            .alphabet-nav
              if koreanEnabled
                // 英文字母行（上面）
                .english-alphabet-row
                  each letter in englishAlphabet
                    a.alphabet-link.english-letter(href=`#letter-${letter}` data-letter=letter)= letter
                // 韩语初声字符行（下面）
                .korean-alphabet-row
                  each letter in koreanInitials
                    a.alphabet-link.korean-letter(href=`#letter-${letter}` data-letter=letter)= letter
              else
                // 只显示英文字母
                .english-alphabet-row
                  each letter in englishAlphabet
                    a.alphabet-link.english-letter(href=`#letter-${letter}` data-letter=letter)= letter
            
            // 标签搜索框
            .tag-search-container
              input#tag-search.tag-search-input(type="text" placeholder=__("tagSearch.placeholder"))
              i.fa.fa-search.search-icon
            
            // 按字母分组的标签 - 初始分组，客户端会重新分组
            .tags-by-alphabet
              - var tagsByLetter = {}
              - site.tags.each(function(tag) {
              -   var letterIndex = getLetterIndex(tag.name)
              -   if (!tagsByLetter[letterIndex]) tagsByLetter[letterIndex] = []
              -   tagsByLetter[letterIndex].push(tag)
              - })
              
              each letter in alphabet
                if tagsByLetter[letter]
                  .letter-group
                    h2.letter-header(id=`letter-${letter}`)= letter
                    .tags-container
                      each tag in tagsByLetter[letter]
                        .tag-item(data-tag-name=tag.name.toLowerCase() data-original-name=tag.name)
                          a.tag-link(href=url_for(tag.path))
                            span.tag-name= tag.name
                            if theme.tagsPage.tag.show_count
                              span.tag-count= tag.posts.length
          else
            // 传统标签云模式
            .traditional-tags
              != tagsList
        else
          p None.
      br
  if page.title === 'links'
    if page.links
      .links
        each group, index in page.links
          h2.link-title!= group.group_name
          .group-description!= group.description
          if group.items
            ul.group-items.clearfix
              each item in group.items
                  li.item-friend(title=item.description)
                    a.item-friend-links(href=item.url)
                      img.site-preview(src=item.img, alt=item.name,,onerror="this.src='img/pic_load_fail.png'")
                      .site-name!= item.name
                      .site-description!= item.description
        include includes/comment.pug
        include includes/locate-button.pug
  if page.title === "project"
    if page.projects
      .projects
        .projects-header
          h1!= "Study Projects"
        ul
          li
            i.fa.fa-circle
            span!= "All projects in this page is not original"
          li
            i.fa.fa-circle
            span!= "But all projects are written by blogger"
          li
            i.fa.fa-circle
            span!= "Click the title to jumpt to the certain original link"
        .projects-container-outer
          .project-container
            each item, index in page.projects
              .box(onclick="javascript:window.location.href='#{item.origin}''")
                .content
                  h2!= ("000" + String(index)).substr(-2)
                  a.title(href=item.origin ,target="_blank")!= item.title
                  p!= item.description
                  a.readmore(href=item.url)!= "Preview"
        .comment
          include includes/comment.pug
  if page.title === "novel"
    .novel
      .left-intro
        h2!= "阅读指南"
        ul
          li!= "点击书的封皮，打开对应的书"
          li!= "← →键翻页"
          li!= "可以手动拖拽翻页"
        h2!= "说明"
        div!= "作者：o_oyao"
        div!= "本页所有书目均为博主原创，书中内容并不代表作者任何立场。"
        div!= "图片及封面来源：网络"
        div!= "书的封面和书中图片均来自网络并加以制作而成，如有侵权，请联系我"
        div
          span!="引用库：本项目引用"
          a(href="http://www.turnjs.com/?tdsourcetag=s_pctim_aiomsg#")!= "turn.js"
          span!= "库"
        h3!="文笔幼稚请不要嘲笑"
      .right-bookshell
        .first-shell
          a.book-lost(href="/books/samples/Lost/index.html")
            img.cover(src="/img/cover-lost.jpg")
          a.book-sick(href="/books/samples/Sick/index.html")
            img.cover(src="/img/cover-sick.jpg")
          a.book-lost(href="/books/samples/Singer/index.html")
            img.cover(src="/img/cover-singer.jpg")
        .second-shell
          a.book-lost(href="/books/samples/old-man/index.html")
            img.cover(src="/img/cover-oldman.jpg")
    include includes/comment.pug
  #paginator!= paginator()
